ZSH_THEME="robbyrussell"

plugins=(
    git
    docker
    kubectl
)

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

alias vim='nvim'

# kube
export KUBECONFIG="$HOME/kubeconfig.yaml"
export GIT_EDITOR=vim
export EDITOR=vim


# PATH
export PATH=$HOME/.pyenv/bin:$PATH
export PATH=$PATH:$HOME/go/bin
export PATH=$PATH:$HOME/.cargo/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:/snap/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/.krew/bin
export PATH=$PATH:$HOME/bin/cmake/bin

export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

export PATH="$PATH:$HOME/.poetry/bin"

export PYENV_ROOT=$(pyenv root)
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# 1password
alias op-login='eval $(op signin my)'

# misc
alias resh='exec $SHELL -l'
alias doco='docker-compose'
alias docker-rmi='docker rmi -f $(docker images -a -q)'
alias clear-dns-cache='sudo systemd-resolve --flush-caches'

# k8s, helm
alias kc='kubectl'
alias kcd='kubectl describe'
alias kcg='kubectl get'
alias kx='kubectx'
alias kn='kubens'

# delete all containers
function docker-rm-containers() { for i in $(docker ps -a | awk '{print$1}' | tail +2);do;docker rm $i;done; }

# delete all images
function docker-rm-images() { for i in $(docker images | awk '{print$3}' | tail +2);do;docker rmi $i;done; }

function tillerless() {
    helm tiller run ${TN} -- $@
}

function restart_replicaset() {
	kubectl scale --replicas=0 $1 && kubectl scale --replicas=1 $1
}

function delete_branches() {
	for b in $(git branch -v | awk '{print$1}' | grep -v -E "^master$|\*"); do
		git branch -D $b;
	done
}

# shell pod
function sp() {
	pod=$1
	ns=$2
	if [[ -z $ns ]]; then
		kubectl exec -it $pod /bin/sh
	else
    kubectl -n $ns exec -it $pod /bin/sh
	fi
}


function runTimes() {
	number=${1}
	shift
	for i in {1..${number}}; do
		"$@";
	done
}

#--------------------------------------------------------------

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

setopt promptsubst

zinit load zdharma-continuum/history-search-multi-word
zinit load zdharma-continuum/fast-syntax-highlighting
zinit load zsh-users/zsh-completions
zinit load zsh-users/zsh-autosuggestions
zinit load zsh-users/zsh-syntax-highlighting
zinit load lets-cli/lets-zsh-plugin

zinit snippet OMZ::plugins/git/git.plugin.zsh

eval "$(starship init zsh)"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
